// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: greetStream.proto

package serverstremmingpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GreetStreamService_GreetStreeming_FullMethodName = "/greetserverstremming.GreetStreamService/GreetStreeming"
)

// GreetStreamServiceClient is the client API for GreetStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition with a streaming RPC
type GreetStreamServiceClient interface {
	GreetStreeming(ctx context.Context, in *GreetStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GreetStreamResponse], error)
}

type greetStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetStreamServiceClient(cc grpc.ClientConnInterface) GreetStreamServiceClient {
	return &greetStreamServiceClient{cc}
}

func (c *greetStreamServiceClient) GreetStreeming(ctx context.Context, in *GreetStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GreetStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GreetStreamService_ServiceDesc.Streams[0], GreetStreamService_GreetStreeming_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GreetStreamRequest, GreetStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GreetStreamService_GreetStreemingClient = grpc.ServerStreamingClient[GreetStreamResponse]

// GreetStreamServiceServer is the server API for GreetStreamService service.
// All implementations must embed UnimplementedGreetStreamServiceServer
// for forward compatibility.
//
// Service definition with a streaming RPC
type GreetStreamServiceServer interface {
	GreetStreeming(*GreetStreamRequest, grpc.ServerStreamingServer[GreetStreamResponse]) error
	mustEmbedUnimplementedGreetStreamServiceServer()
}

// UnimplementedGreetStreamServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGreetStreamServiceServer struct{}

func (UnimplementedGreetStreamServiceServer) GreetStreeming(*GreetStreamRequest, grpc.ServerStreamingServer[GreetStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GreetStreeming not implemented")
}
func (UnimplementedGreetStreamServiceServer) mustEmbedUnimplementedGreetStreamServiceServer() {}
func (UnimplementedGreetStreamServiceServer) testEmbeddedByValue()                            {}

// UnsafeGreetStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetStreamServiceServer will
// result in compilation errors.
type UnsafeGreetStreamServiceServer interface {
	mustEmbedUnimplementedGreetStreamServiceServer()
}

func RegisterGreetStreamServiceServer(s grpc.ServiceRegistrar, srv GreetStreamServiceServer) {
	// If the following call pancis, it indicates UnimplementedGreetStreamServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GreetStreamService_ServiceDesc, srv)
}

func _GreetStreamService_GreetStreeming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GreetStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreetStreamServiceServer).GreetStreeming(m, &grpc.GenericServerStream[GreetStreamRequest, GreetStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GreetStreamService_GreetStreemingServer = grpc.ServerStreamingServer[GreetStreamResponse]

// GreetStreamService_ServiceDesc is the grpc.ServiceDesc for GreetStreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreetStreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "greetserverstremming.GreetStreamService",
	HandlerType: (*GreetStreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GreetStreeming",
			Handler:       _GreetStreamService_GreetStreeming_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "greetStream.proto",
}
