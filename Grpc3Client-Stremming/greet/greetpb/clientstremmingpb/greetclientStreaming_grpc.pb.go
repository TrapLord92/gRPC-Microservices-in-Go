// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: greetclientStreaming.proto

package clientstremmingpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GreetClientStreamService_GreetStreeming_FullMethodName = "/greetclientstremming.GreetClientStreamService/GreetStreeming"
)

// GreetClientStreamServiceClient is the client API for GreetClientStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition with a streaming RPC
type GreetClientStreamServiceClient interface {
	GreetStreeming(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[GreetClientStreamRequest, GreetClientStreamResponse], error)
}

type greetClientStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetClientStreamServiceClient(cc grpc.ClientConnInterface) GreetClientStreamServiceClient {
	return &greetClientStreamServiceClient{cc}
}

func (c *greetClientStreamServiceClient) GreetStreeming(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[GreetClientStreamRequest, GreetClientStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GreetClientStreamService_ServiceDesc.Streams[0], GreetClientStreamService_GreetStreeming_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GreetClientStreamRequest, GreetClientStreamResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GreetClientStreamService_GreetStreemingClient = grpc.ClientStreamingClient[GreetClientStreamRequest, GreetClientStreamResponse]

// GreetClientStreamServiceServer is the server API for GreetClientStreamService service.
// All implementations must embed UnimplementedGreetClientStreamServiceServer
// for forward compatibility.
//
// Service definition with a streaming RPC
type GreetClientStreamServiceServer interface {
	GreetStreeming(grpc.ClientStreamingServer[GreetClientStreamRequest, GreetClientStreamResponse]) error
	mustEmbedUnimplementedGreetClientStreamServiceServer()
}

// UnimplementedGreetClientStreamServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGreetClientStreamServiceServer struct{}

func (UnimplementedGreetClientStreamServiceServer) GreetStreeming(grpc.ClientStreamingServer[GreetClientStreamRequest, GreetClientStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GreetStreeming not implemented")
}
func (UnimplementedGreetClientStreamServiceServer) mustEmbedUnimplementedGreetClientStreamServiceServer() {
}
func (UnimplementedGreetClientStreamServiceServer) testEmbeddedByValue() {}

// UnsafeGreetClientStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetClientStreamServiceServer will
// result in compilation errors.
type UnsafeGreetClientStreamServiceServer interface {
	mustEmbedUnimplementedGreetClientStreamServiceServer()
}

func RegisterGreetClientStreamServiceServer(s grpc.ServiceRegistrar, srv GreetClientStreamServiceServer) {
	// If the following call pancis, it indicates UnimplementedGreetClientStreamServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GreetClientStreamService_ServiceDesc, srv)
}

func _GreetClientStreamService_GreetStreeming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetClientStreamServiceServer).GreetStreeming(&grpc.GenericServerStream[GreetClientStreamRequest, GreetClientStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GreetClientStreamService_GreetStreemingServer = grpc.ClientStreamingServer[GreetClientStreamRequest, GreetClientStreamResponse]

// GreetClientStreamService_ServiceDesc is the grpc.ServiceDesc for GreetClientStreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreetClientStreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "greetclientstremming.GreetClientStreamService",
	HandlerType: (*GreetClientStreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GreetStreeming",
			Handler:       _GreetClientStreamService_GreetStreeming_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "greetclientStreaming.proto",
}
